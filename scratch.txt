datum add coffee 1
datum view coffee
datum coffee
datum rm coffee

add tag to db table steps:
- log the datetime
- check if tag column/field exists
- if exists, add row under that field
- if not, then add the field, then the row

TODO:
- remove unused columns

TODO messenger chatbot:
- select tag quick replies
	- get tag counts from db
		- datum-cli command
	- show top 11 tags
- select tag value quick replies
	- get tag value counts from db
		- make fields for tag value counts
- open up to other users
	- implement way to upload/download data (csv)
	- inform of their privacy and security!

1. say hello to initiate quick replies
2. show top level commands (list, reset, add, etc.)
3. for sub-commands, have intermediate state before calling datum-cli (build the arguments)
4. show top tags, tag-values as quick replies
5.

array of qr-cmd pairs
map array to replies
have datum call accept commands
if block for sub-commands
catch 'add' 'remove'
send other messages to present/receive subcommands


* chatbot flow:
> (any text)
#add #remove #list #help
> #add
#tag1 #tag2 #tag3 ...
> #tag1
#value1 #value2 #value3
> (text)
added tag1: [text] on 01/28 at 1:33pm #add #remove #list #help

features

list datums of specific tags
datum ls tags water, exercise
datum ls tags water:10

datum a
datum add

datum r
datum rm
datum remove

datum e
datum ed
datum edit

datum l
datum ls
datum list

datum
datum -h
datum --help


> datum time today
activity   duration   interval
sleep      07:30      24:07 - 07:37
breakfast  00:40      07:40 - 08:20
surf       00:50      07:50 - 08:40 (overlapping activities!)
code       01:20      09:00 - 10:20

>datum time 'last week'

> datum time exercise
duration  date   interval
01:10     07/07  12:34 - 00:31

> datum time exercise yesterday
duration  interval
datum time exercise 'aug 10 to aug 12'
duration date interval
datum time push_ups pull_ups 'last week'

1. grab all start/stop datums in time interval
2. filter out tag-values if specified
3. for each start tag:
  1. look for a matching stop tag
  2. if no stop found, look for next start
  3. return array with tag-value, duration, interval
datum time [activity value] [time interval]
datum time [value1] [value2] [value3] [time interval]
datum time [time interval]
datum time [activity value]

time_interval = 0
activities = []
for arg in args:
    if is_time(arg):
        time_interval = arg
    else:
        activities.append(arg)
if not time_interval:
    throw error
    return

time_app_rows = []
for datum in datums_between_interval:
    if datum contains start
    and activities.contains(datum.start)
        activity = datum.start
        start_time = datum.time or datum._time
        stop_datum = find_matching_stop(datum) or find_next_start(datum)
        stop_time = stop_datum.time or stop_datum._time
        duration = stop_time - start_time
        time_app_rows.append(
            [activity, duration, start_time, stop_time]
        )

datum info exercise

sum code time for each day and show average over a week

> datum edit 101
101: a_tag: value, another: 'a value'
Enter blank to skip (default)
a_tag [remove/edit/Skip]:
another [remove/edit/Skip]: e
another: 'something else'
101: a_tag: value, another: 'something else'
> datum edit

> datum add pill1 pill2 pill3 ... alias:pills
> datum add pills
> datum ls
1  pill1, pill2, pill3 ...
2  pill1, pill2, pill3 ...
